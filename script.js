score = 0;
cross = true;

audiogo = new Audio('Hypnosis - Godmode.mp3');
audio = new Audio('Male Zombie Roar.mp3');
setTimeout(() => {
    audiogo.play();
}, 1000);


document.onkeydown = function (e){                          
    console.log("Key code is : ", e.code);    // refer MDN to know about KeyboardEvent.code
    if (e.code == "ArrowUp") {
        boy = document.querySelector('.boy');
        boy.classList.add('animateBoy')
        setTimeout(() => {
            boy.classList.remove('animateBoy')
        }, 700);
    }
    else if(e.code == "ArrowRight") {
        boy = document.querySelector('.boy');
        boyX = parseInt(window.getComputedStyle(boy, null).getPropertyValue('left'));
        boy.style.left = boyX + 350 + "px";
    }
    else if(e.code == "ArrowLeft") {
        boy = document.querySelector('.boy');
        boyX = parseInt(window.getComputedStyle(boy, null).getPropertyValue('left'));
        boy.style.left = (boyX - 350) + "px";
    }
    else if(e.code == "Space"){
        window.location.reload();
    }
}

setInterval(() => {
    boy = document.querySelector('.boy');
    obstacle = document.querySelector('.obstacle');
    gameOver = document.querySelector('.gameOver');

    dx = parseInt(window.getComputedStyle(boy, null).getPropertyValue('left'));
    dy = parseInt(window.getComputedStyle(boy, null).getPropertyValue('top'));

    ox = parseInt(window.getComputedStyle(obstacle, null).getPropertyValue('left'));
    oy = parseInt(window.getComputedStyle(obstacle, null).getPropertyValue('top'));

    offsetX = Math.abs(dx - ox);
    offsetY = Math.abs(dy - oy);

    // console.log(offsetX, offsetY);

    if (offsetX < 73 && offsetY >52 ) {
        gameOver.style.visibility = "visible";
        obstacle.classList.remove('obstacleAni');
        audio.play();
        setTimeout(() => {
            audiogo.pause();
            audio.pause();
        }, 1000);
    }
    else if(offsetX<145 && cross){
        score+=1;
        updateScore(score);
        cross = false;
        
        setTimeout(() => {
            cross = true;
        }, 1000);
        setTimeout(() => {
            aniDur = parseFloat(window.getComputedStyle(obstacle, null).getPropertyValue('animation-duration'));
            newDur = aniDur - 0.1;
            obstacle.style.animationDuration = newDur + "s";
            console.log("new animation duration: ", newDur);
        }, 500);
    }
}, 10);

function updateScore(score) {
    scoreCont.innerHTML = "Your Score : " + score
}




// The parameter (e) is automatically passed from javascript to your function when you add an event listener. It represents the element that was affected, an example would be the button element that was clicked.

// The KeyboardEvent.code property represents a physical key on the keyboard (as opposed to the character generated by pressing the key). In other words, this property returns a value that isn't altered by keyboard layout or the state of the modifier keys.

// parseInt - converts a string to integer